from manim import *

class AutoGeneratedScene(Scene):
    def construct(self):
        # Set colors
        COLOR_A = BLUE
        COLOR_B = GREEN
        COLOR_COMPLEMENT = YELLOW

        # Define the universal set as a rectangle
        universal_set = Rectangle(width=8, height=5, color=WHITE)
        universal_set_label = MathTex(r"\mathcal{U}", color=WHITE).move_to(universal_set.get_corner(NW) + 0.3*DR)

        # Define sets A and B as circles
        circle_a = Circle(radius=1.5, color=COLOR_A, fill_opacity=0.5).shift(LEFT*2)
        circle_b = Circle(radius=1.5, color=COLOR_B, fill_opacity=0.5).shift(RIGHT*2)
        a_label = MathTex("A", color=COLOR_A).move_to(circle_a.get_center())
        b_label = MathTex("B", color=COLOR_B).move_to(circle_b.get_center())

        # Group sets A and B
        sets_ab = Group(circle_a, circle_b)
        sets_ab.move_to(ORIGIN)

        # Create the scene
        self.play(Create(universal_set), Write(universal_set_label))
        self.wait(1)
        self.play(Create(circle_a), Create(circle_b), Write(a_label), Write(b_label))
        self.wait(1)

        # Show A union B
        union_ab = Union(circle_a, circle_b, color=COLOR_A, fill_opacity=0.5)
        union_label = MathTex(r"A \cup B", color=WHITE).move_to(UP*2.5)
        self.play(FadeIn(union_label))
        self.play(Create(union_ab))
        self.wait(1)

        # Show complement of A union B
        complement_union_ab = Difference(universal_set, union_ab, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        complement_label = MathTex(r"(A \cup B)'", color=WHITE).move_to(UP*2.5)
        self.play(Transform(union_label, complement_label))
        self.play(TransformFromCopy(universal_set, complement_union_ab))
        self.wait(1)
        self.play(FadeOut(union_ab))

        # Clear the union visuals
        self.play(FadeOut(complement_union_ab), FadeOut(union_label))
        self.wait(0.5)

        # Show A complement
        complement_a = Difference(universal_set, circle_a, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        a_complement_label = MathTex(r"A'", color=COLOR_COMPLEMENT).move_to(circle_a.get_center())
        self.play(TransformFromCopy(universal_set, complement_a))
        self.play(Transform(a_label, a_complement_label))
        self.wait(1)

        # Show B complement
        complement_b = Difference(universal_set, circle_b, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        b_complement_label = MathTex(r"B'", color=COLOR_COMPLEMENT).move_to(circle_b.get_center())
        self.play(TransformFromCopy(universal_set, complement_b))
        self.play(Transform(b_label, b_complement_label))
        self.wait(1)

        # Show A complement intersection B complement
        intersection_complement = Intersection(complement_a, complement_b, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        intersection_label = MathTex(r"A' \cap B'", color=WHITE).move_to(UP*2.5)
        self.play(FadeIn(intersection_label))
        self.play(TransformFromCopy(universal_set, intersection_complement))
        self.wait(1)

        # State De Morgan's Law 1
        law1 = MathTex(r"(A \cup B)' = A' \cap B'", color=WHITE).move_to(DOWN*2.5)
        self.play(Write(law1))
        self.wait(2)

        # Fade out everything related to Law 1
        self.play(FadeOut(intersection_label, law1, complement_a, complement_b, a_complement_label, b_complement_label))
        self.wait(0.5)

        # Reset labels
        a_label_reset = MathTex("A", color=COLOR_A).move_to(circle_a.get_center())
        b_label_reset = MathTex("B", color=COLOR_B).move_to(circle_b.get_center())
        self.play(Transform(a_label, a_label_reset), Transform(b_label, b_label_reset))
        self.wait(0.5)

        # Show A intersection B
        intersection_ab = Intersection(circle_a, circle_b, color=COLOR_A, fill_opacity=0.5)
        intersection_label = MathTex(r"A \cap B", color=WHITE).move_to(UP*2.5)
        self.play(FadeIn(intersection_label))
        self.play(Create(intersection_ab))
        self.wait(1)

        # Show complement of A intersection B
        complement_intersection_ab = Difference(universal_set, intersection_ab, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        complement_label = MathTex(r"(A \cap B)'", color=WHITE).move_to(UP*2.5)
        self.play(Transform(intersection_label, complement_label))
        self.play(TransformFromCopy(universal_set, complement_intersection_ab))
        self.wait(1)
        self.play(FadeOut(intersection_ab))

        # Clear the intersection visuals
        self.play(FadeOut(complement_intersection_ab), FadeOut(complement_label))
        self.wait(0.5)

        # Show A complement
        complement_a = Difference(universal_set, circle_a, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        a_complement_label = MathTex(r"A'", color=COLOR_COMPLEMENT).move_to(circle_a.get_center())
        self.play(TransformFromCopy(universal_set, complement_a))
        self.play(Transform(a_label, a_complement_label))
        self.wait(1)

        # Show B complement
        complement_b = Difference(universal_set, circle_b, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        b_complement_label = MathTex(r"B'", color=COLOR_COMPLEMENT).move_to(circle_b.get_center())
        self.play(TransformFromCopy(universal_set, complement_b))
        self.play(Transform(b_label, b_complement_label))
        self.wait(1)

        # Show A complement union B complement
        union_complement = Union(complement_a, complement_b, color=COLOR_COMPLEMENT, fill_opacity=0.5)
        union_label = MathTex(r"A' \cup B'", color=WHITE).move_to(UP*2.5)
        self.play(FadeIn(union_label))
        self.play(TransformFromCopy(universal_set, union_complement))
        self.wait(1)

        # State De Morgan's Law 2
        law2 = MathTex(r"(A \cap B)' = A' \cup B'", color=WHITE).move_to(DOWN*2.5)
        self.play(Write(law2))
        self.wait(2)

        # Final fade out
        self.play(FadeOut(union_label, law2, complement_a, complement_b, universal_set, universal_set_label, circle_a, circle_b, a_complement_label, b_complement_label))
        self.wait(1)