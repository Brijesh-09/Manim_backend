from manim import *

class AutoGeneratedScene(Scene):
    def construct(self):
        # Set the scene duration
        self.camera.background_color = WHITE
        self.duration = 30

        # Define colors
        color_A = BLUE
        color_B = RED
        color_negation = GREEN

        # Title
        title = Text("DeMorgan's Laws", color=BLACK).scale(1.2).to_edge(UP)
        self.play(Write(title))
        self.wait(1)

        # Define universal set and subsets
        universe = Rectangle(width=6, height=4, color=BLACK)
        universe_label = MathTex(r"\mathcal{U}", color=BLACK).move_to(universe.get_corner(UP + LEFT) + 0.3 * UP + 0.3 * LEFT)
        A = Circle(radius=1, color=color_A).shift(LEFT)
        B = Circle(radius=1, color=color_B).shift(RIGHT)
        A_label = MathTex("A", color=color_A).move_to(A.get_center())
        B_label = MathTex("B", color=color_B).move_to(B.get_center())

        # Group the sets
        venn_diagram = Group(universe, A, B, universe_label, A_label, B_label).move_to(ORIGIN)

        # Animation to create the Venn diagram
        self.play(Create(universe), Write(universe_label))
        self.play(Create(A), Create(B), Write(A_label), Write(B_label))
        self.wait(1)

        # First DeMorgan's Law: ¬(A ∪ B) = ¬A ∩ ¬B
        law1_lhs = MathTex(r"\neg (A \cup B)", color=BLACK).to_edge(LEFT).shift(UP * 1.5)
        law1_rhs = MathTex(r"\neg A \cap \neg B", color=BLACK).to_edge(RIGHT).shift(UP * 1.5)
        self.play(Write(law1_lhs), Write(law1_rhs))

        # Shade A ∪ B
        union_region = Intersection(A, B, color=YELLOW, fill_opacity=0.5)
        union_region_A = Difference(A, B, color=YELLOW, fill_opacity=0.5)
        union_region_B = Difference(B, A, color=YELLOW, fill_opacity=0.5)

        union_group = Group(union_region, union_region_A, union_region_B)

        self.play(FadeIn(union_region_A), FadeIn(union_region_B), FadeIn(union_region))

        # Shade ¬(A ∪ B)
        complement_union = Difference(universe, Group(A, B), color=color_negation, fill_opacity=0.5)
        self.play(FadeOut(union_group), FadeIn(complement_union))
        self.wait(1)

        # Move to right side
        self.play(
            FadeOut(complement_union),
            A.animate.set_fill(color=color_A, fill_opacity=0),
            B.animate.set_fill(color=color_B, fill_opacity=0)
        )

        # Shade ¬A
        complement_A = Difference(universe, A, color=color_negation, fill_opacity=0.5)
        self.play(FadeIn(complement_A))
        self.wait(0.5)

        # Shade ¬B
        complement_B = Difference(universe, B, color=color_negation, fill_opacity=0.5)
        self.play(FadeIn(complement_B))
        self.wait(0.5)

        # Shade ¬A ∩ ¬B
        intersection_complement = Intersection(complement_A, complement_B, color=color_negation, fill_opacity=0.5)
        self.play(ReplacementTransform(Group(complement_A, complement_B), intersection_complement))
        self.wait(1)

        # Second DeMorgan's Law: ¬(A ∩ B) = ¬A ∪ ¬B
        self.play(FadeOut(law1_lhs), FadeOut(law1_rhs), FadeOut(intersection_complement))
        law2_lhs = MathTex(r"\neg (A \cap B)", color=BLACK).to_edge(LEFT).shift(UP * 1.5)
        law2_rhs = MathTex(r"\neg A \cup \neg B", color=BLACK).to_edge(RIGHT).shift(UP * 1.5)
        self.play(Write(law2_lhs), Write(law2_rhs))

        # Shade A ∩ B
        intersection_region = Intersection(A, B, color=YELLOW, fill_opacity=0.5)
        self.play(FadeIn(intersection_region))

        # Shade ¬(A ∩ B)
        complement_intersection = Difference(universe, intersection_region, color=color_negation, fill_opacity=0.5)
        self.play(FadeOut(intersection_region), FadeIn(complement_intersection))
        self.wait(1)

        # Move to the right side
        self.play(
            FadeOut(complement_intersection),
            A.animate.set_fill(color=color_A, fill_opacity=0),
            B.animate.set_fill(color=color_B, fill_opacity=0)
        )

        # Shade ¬A
        complement_A = Difference(universe, A, color=color_negation, fill_opacity=0.5)
        self.play(FadeIn(complement_A))
        self.wait(0.5)

        # Shade ¬B
        complement_B = Difference(universe, B, color=color_negation, fill_opacity=0.5)
        self.play(FadeIn(complement_B))
        self.wait(0.5)

        # Shade ¬A ∪ ¬B
        union_complement = Union(complement_A, complement_B, color=color_negation, fill_opacity=0.5)
        self.play(ReplacementTransform(Group(complement_A, complement_B), union_complement))

        # Final wait
        self.wait(2)
        self.play(FadeOut(venn_diagram), FadeOut(union_complement), FadeOut(law2_lhs), FadeOut(law2_rhs), FadeOut(title))