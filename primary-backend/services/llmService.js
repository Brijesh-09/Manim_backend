import 'dotenv/config';
import axios from 'axios';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { enqueueRenderJob } from './producer.js';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
const prisma = new PrismaClient();

// AWS & Gemini setup
const GEMINI_URL = process.env.GEMINI_API_URL
const REGION = process.env.AWS_REGION 

const s3 = new S3Client({
  region: REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});



export const generateCode = async ({ prompt, userId, iterationId }) => {
  const fullPrompt = `
You are an expert Python developer and educator using Manim Community Edition (manimce) version 0.18.0.

Your task is to create a clear, engaging, and beginner-friendly animation that visually explains the following topic:

"${prompt}"

✅ Guidelines:
- Structure the animation to last around **4 to 5 minutes** by breaking it into clear, logical visual steps.
- Use only **built-in Manim elements** like: Text, MathTex, Circle, Square, Rectangle, Arrow.
- Use animations such as: Write, FadeIn, FadeOut, Transform, ReplacementTransform, Create, MoveTo, etc.
- Add pauses using \`self.wait()\` between steps so the viewer has time to absorb the visuals.
- Carefully use layout methods like \`.to_edge()\`, \`.next_to()\`, and \`.shift()\` to **avoid overlapping elements**.
- Avoid clutter. Use spacing and grouping to make the visuals easy to understand.

🧱 Structure your response in two parts:
1. A **brief explanation** (2–4 sentences) describing what will be animated and the purpose behind it.
2. The **complete Python code** using Manim with **clean inline comments** to explain each part.

⚙️ Technical Requirements:
- Define a class named: \`AutoGeneratedScene(Scene)\`
- Include all required imports and the \`construct(self)\` method.
- Ensure the code is **syntactically valid**, cleanly indented, and directly runnable via the Manim CLI.
- Do **not** use any external files (images, fonts, or audio).
- Do **not** return any markdown formatting (like \`\`\`python), just plain text.

🎯 Final Output:
First the explanation, then the code — as plain text. Focus on clarity and educational value.
`;

try {
  const llmResp = await axios.post(
    `${GEMINI_URL}?key=${process.env.GEMINI_API_KEY}`,
    {
      contents: [{ parts: [{ text: fullPrompt }] }]
    },
    { headers: { 'Content-Type': 'application/json' } }
  );

  let aiResponse = llmResp.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || '';
  if (!aiResponse) throw new Error('No content returned from Gemini');

  // ⬇️ Extract Python code from markdown
  const codeMatch = aiResponse.match(/```(?:python)?\s*([\s\S]*?)\s*```/i);
  const code = codeMatch ? codeMatch[1].trim() : aiResponse.trim(); // fallback if not wrapped

  // ⬇️ S3 Key and Metadata
  const s3Key = `code/${userId}/${iterationId}.py`;
  const metadata = {
    prompt: typeof prompt === "string"
      ? prompt.replace(/[^\x20-\x7E]+/g, '').slice(0, 100)
      : "",
    timestamp: new Date().toISOString(),
  };

  await s3.send(new PutObjectCommand({
    Bucket: process.env.S3_BUCKET_NAME,
    Key: s3Key,
    Body: code,
    ContentType: 'text/x-python',
    Metadata: metadata,
  }));

  console.log(`✅ Uploaded to S3: ${s3Key}`);

  const fileUrl = `https://${process.env.S3_BUCKET_NAME}.s3.${REGION}.amazonaws.com/${s3Key}`;

  // ⬇️ Update iteration in DB
  await prisma.iteration.update({
    where: { id: iterationId },
    data: {
      aiResponse,   // full explanation + code
      code,         // clean code only
      code: fileUrl,
      status: 'PROCESSING',
    }
  });

  // ⬇️ Trigger render job
  await enqueueRenderJob({ s3Key, fileUrl, metadata });

  return { code, text: aiResponse };

} catch (err) {
  console.error('Error generating/uploading Manim code:', err.response?.data || err.message);
  throw new Error('Failed to generate or upload Manim code.');
}
};



// ✅ Helper to build chat prompt
const buildUpdatedPrompt = (originalPrompt, oldCode, userInstruction) => {
  return `
You are an expert Python developer using ManimCE (v0.18.0).

Here’s the original topic and animation code:
Prompt: "${originalPrompt}"
Code:
${oldCode}

User now wants this change:
"${userInstruction}"

➡️ Generate a new version of the code implementing the above feedback. Make sure:
- The animation runs smoothly.
- No overlaps or broken animations.
- Add inline comments.
- Follow structure similar to before.
- Output only valid Python code, no markdown.
`;
};


// ✅ Chat handler
export const updateProject = async (req, res) => {
  const { id: projectId } = req.params;
  const { message } = req.body;

  try {
    const project = await prisma.project.findUnique({
      where: { id: projectId },
      include: { iterations: true },
    });

    if (!project) {
      return res.status(404).json({ success: false, message: "Project not found" });
    }

    const latestIteration = project.iterations[project.iterations.length - 1];
    const basePrompt = latestIteration.prompt;

    // Step 1: create a new empty iteration
    const newIteration = await prisma.iteration.create({
      data: {
        prompt: `${basePrompt}\n\nUser Suggestion: ${message}`,
        aiResponse: '',
        code: '',
        project: { connect: { id: projectId } },
        status: 'PROCESSING',
      },
    });

    const fullPrompt = buildUpdatedPrompt(basePrompt, latestIteration.code, message);

    // Step 2: Generate code using AI
    const { code, text } = await generateCode({
      prompt: basePrompt,
      userId: req.user.id,
      iterationId: newIteration.id,
    });

    // Step 3: (Render already triggered inside generateCode)

    return res.json({
      success: true,
      iterationId: newIteration.id,
      prompt: fullPrompt,
      aiResponse: code,
      text,
    });

  } catch (err) {
    console.error("🧨 Update error:", err);
    res.status(500).json({ success: false, error: "Update failed." });
  }
};
